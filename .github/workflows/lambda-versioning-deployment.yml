name: Lambda Versioning and Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'test-1/**'
      - 'test-2/**'
      - 'test-3/**'
      - 'test-4/**'

jobs:
  detect_and_publish:
    name: Detect Changes and Publish Lambda Versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Identify Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v39

      - name: Generate Unique Deployment ID
        id: generate-deployment-id
        run: |
          DEPLOYMENT_ID=$(date +%Y%m%d%H%M%S)
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "::set-output name=deployment_id::$DEPLOYMENT_ID"

      - name: Initialize New CSV File
        id: init-csv
        run: |
          NEW_CSV_NAME="lambda_versions_${{ steps.generate-deployment-id.outputs.deployment_id }}.csv"
          echo "DeploymentID,FunctionName,Version,LastModified,Changed" > "$NEW_CSV_NAME"
          echo "::set-output name=csv_name::$NEW_CSV_NAME"

      - name: Find All Lambda Functions
        id: find-all-lambdas
        run: |
          ALL_LAMBDAS=$(aws lambda list-functions --query 'Functions[*].FunctionName' --output text)
          echo "$ALL_LAMBDAS" > all_lambdas.txt
          echo "::set-output name=all_lambdas::$ALL_LAMBDAS"

      - name: Zip Lambda Function Code
        if: ${{ steps.changed-files.outputs.all_changed_files != '' }}
        run: |
          for folder in $(cat unique_updated_directories.txt); do
            echo "Creating zip for $folder"
            cd $folder
            zip -r function.zip ./*
            cd ..
          done

      - name: Publish New Lambda Versions
        if: ${{ steps.changed-files.outputs.all_changed_files != '' }}
        run: |
          for folder in $(cat unique_updated_directories.txt); do
            echo "Publishing new version of Lambda in folder: $folder"
            if [ -f "$folder/function.zip" ]; then
              aws lambda update-function-code --function-name "$folder" --zip-file fileb://$folder/function.zip

              while true; do
                status=$(aws lambda get-function --function-name "$folder" --query 'Configuration.LastUpdateStatus' --output text)
                if [ "$status" != "InProgress" ]; then
                  break
                fi
                echo "Waiting for update to complete for $folder..."
                sleep 5
              done

              NEW_VERSION=$(aws lambda publish-version --function-name "$folder" --query 'Version' --output text)
              echo "New version published: $NEW_VERSION for $folder"

              FUNCTION_DETAILS=$(aws lambda get-function --function-name "$folder" --output json)
              FUNCTION_NAME=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.FunctionName')
              LAST_MODIFIED=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.LastModified')

              # Append details to new CSV with Changed status
              echo "${{ steps.generate-deployment-id.outputs.deployment_id }},$FUNCTION_NAME,$NEW_VERSION,$LAST_MODIFIED,Yes" >> "${{ steps.init-csv.outputs.csv_name }}"
            else
              echo "No function.zip found in $folder, skipping..."
            fi
          done

      - name: Log Unchanged Lambda Functions
        run: |
          for function in $(cat all_lambdas.txt); do
            if ! grep -q "$function" "${{ steps.init-csv.outputs.csv_name }}"; then
              FUNCTION_DETAILS=$(aws lambda get-function --function-name "$function" --output json)
              LAST_MODIFIED=$(echo "$FUNCTION_DETAILS" | jq -r '.Configuration.LastModified')

              # Append unchanged function details to new CSV
              echo "${{ steps.generate-deployment-id.outputs.deployment_id }},$function,Not Changed,$LAST_MODIFIED,No" >> "${{ steps.init-csv.outputs.csv_name }}"
            fi
          done

      - name: Upload Lambda Versions to S3
        run: |
          aws s3 cp "${{ steps.init-csv.outputs.csv_name }}" s3://lambda-versioning-data/"${{ steps.init-csv.outputs.csv_name }}"
